name: Backend CI/CD

on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ dev, main ]
    paths:
      - 'src/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up jdk
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew\
      - name: Execute test
        run: ./gradlew test --info

  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Set env
        id: set-environment
        run: |
          echo "Target Branch -> ${{ github.base_ref }}"
          echo "environment=dev" >> $GITHUB_OUTPUT

          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi
      - name: Check env
        run: echo "Current environment -> ${{ steps.set-environment.outputs.environment }}"

  image-build:
    runs-on: ubuntu-latest
    needs: [ set-environment ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up jdk
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew\
      - name: Build with gradle
        run: ./gradlew bootJar
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: Docker build & push
        run: |
          docker build --build-arg SPRING_BOOT_APP_PROFILE=${{ matrix.environment }} --platform linux/arm64 --tag ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, image-build ]
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.BACKEND_EC2_HOST }}
          username: ${{ secrets.BACKEND_EC2_USER }}
          key: ${{ secrets.BACKEND_EC2_SSH_KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "~/project"

      - name: Deploy new Spring Boot Application
        id: deploy-status
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.BACKEND_EC2_HOST }}
          username: ${{ secrets.BACKEND_EC2_USER }}
          key: ${{ secrets.BACKEND_EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/project
            
            # create env file
            cat <<EOF > .${{ matrix.environment }}.env
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            
            SPRING_BOOT_APP_IMAGE_REPOSITORY_PATH=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
            SPRING_BOOT_APP_IMAGE_TAG=${{ github.sha }}
            DB_URL=${{ secrets.DB_URL }}
            EOF

            # deploy with docker
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username ${{ secrets.AWS_REPOSITORY_ID }} --password-stdin ${{ secrets.ECR_REGISTRY }}
            sudo docker-compose --env-file .${{ matrix.environment }}.env stop springboot-app
            sudo docker-compose --env-file .${{ matrix.environment }}.env rm -f springboot-app
            sudo docker images --filter=reference="*/springboot-app-${{ matrix.environment }}:*" -q | xargs -r sudo docker rmi -f
            sudo docker-compose --env-file .${{ matrix.environment }}.env up -d springboot-app
            
            sudo rm -rf .${{ matrix.environment }}.env

      - name: notify
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Backend Î∞∞Ìè¨ Í≤∞Í≥º ÏïåÎ¶º üî•",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Ïò§ÎäòÏùÄ Ìá¥Í∑ºÌï† Ïàò ÏûàÏùÑÍπå...\nEnvironment : backend-${{ matrix.environment }}, Result : ${{ steps.deploy-status.outcome == 'success' && 'success üéâ' || 'fail üíÄ' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
